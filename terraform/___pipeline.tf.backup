

data "aws_caller_identity" "current_account" {}

data "template_file" "buildspec" {
  template = file("buildspec.yml")
  vars = {
    env                = var.environment
    AWS_DEFAULT_REGION = var.aws_region
    AWS_ACCOUNT_ID     = data.aws_caller_identity.current_account.account_id
    IMAGE_REPO_NAME    = var.telleroo_application_ecr_name
    IMAGE_TAG          = var.telleroo_application_image_version
    CONTAINER_NAME     = var.telleroo_application_ecs_container_name
  }
}

resource "aws_codebuild_project" "application_build" {
  badge_enabled  = false
  build_timeout  = 60
  name           = "${var.application}-${var.environment}-application"
  queued_timeout = 480
  service_role   = aws_iam_role.codebuild_role.arn
  tags = {
    Environment = var.environment
  }

  artifacts {
    encryption_disabled    = false
    name                   = "${var.application}-${var.environment}-artifacts"
    override_artifact_name = false
    packaging              = "NONE"
    type                   = "CODEPIPELINE"
  }

  environment {
    compute_type                = "BUILD_GENERAL1_SMALL"
    image                       = "aws/codebuild/amazonlinux2-x86_64-standard:4.0"
    image_pull_credentials_type = "CODEBUILD"
    privileged_mode             = true
    type                        = "LINUX_CONTAINER"
  }

  logs_config {
    cloudwatch_logs {
      status = "ENABLED"
    }

    s3_logs {
      encryption_disabled = false
      status              = "DISABLED"
    }
  }

  source {
    buildspec           = data.template_file.buildspec.rendered
    git_clone_depth     = 0
    insecure_ssl        = false
    report_build_status = false
    type                = "CODEPIPELINE"
  }
}

resource "aws_codestarconnections_connection" "telleroo" {
  name          = "Githubtelleroo"
  provider_type = "GitHub"
}

resource "aws_codepipeline" "codepipeline" {
  name     = "${var.application}-${var.environment}-pipeline"
  role_arn = aws_iam_role.codepipeline_role.arn

  artifact_store {
    location = aws_s3_bucket.codepipeline_bucket.bucket
    type     = "S3"

  }

  stage {
    name = "Source"

    action {
      name             = "Source"
      category         = "Source"
      owner            = "AWS"
      provider         = "CodeStarSourceConnection"
      version          = "1"
      output_artifacts = ["source_output"]

      configuration = {
        ConnectionArn    = aws_codestarconnections_connection.telleroo.arn
        FullRepositoryId = var.telleroo_application_pipeline_FullRepositoryID
        BranchName       = var.telleroo_application_pipeline_BranchName
      }
    }
  }

  stage {
    name = "Build"

    action {
      name             = "Build"
      category         = "Build"
      owner            = "AWS"
      provider         = "CodeBuild"
      input_artifacts  = ["source_output"]
      output_artifacts = ["build_output"]
      version          = "1"

      configuration = {
        ProjectName = "${var.application}-${var.environment}-application"
        EnvironmentVariables = jsonencode(
          [
            {
              name  = "IMAGE_REPO_NAME"
              type  = "PLAINTEXT"
              value = "${var.telleroo_application_ecr_name}_${var.environment}"
            },
            {
              name  = "IMAGE_TAG"
              type  = "PLAINTEXT"
              value = var.telleroo_application_image_version
            },
            {
              name  = "AWS_ACCOUNT_ID"
              type  = "PLAINTEXT"
              value = data.aws_caller_identity.current_account.account_id
            },

          ]
        )
      }
    }
  }

  stage {
    name = "Deploy"

    action {
      name            = "Deploy"
      category        = "Deploy"
      owner           = "AWS"
      provider        = "ECS"
      input_artifacts = ["build_output"]
      version         = "1"

      configuration = {
        ClusterName       = format("%s-%s-ecs-cluster", var.application, var.environment)
        ServiceName       = format("%s-ecs-service", var.application)
        FileName          = "imagedefinitions.json"
        DeploymentTimeout = "15"

      }
    }
  }
}

resource "aws_s3_bucket" "codepipeline_bucket" {
  bucket = "${var.application}-${var.environment}-codepipelinebucket"
}

resource "aws_s3_bucket_acl" "codepipeline_bucket_acl" {
  bucket = aws_s3_bucket.codepipeline_bucket.id
  acl    = "private"
}

