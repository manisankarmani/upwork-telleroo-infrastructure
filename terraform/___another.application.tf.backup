resource "aws_ecr_repository" "telleroo_liveaction" {
  name                 = format("%s_%s",var.telleroo_liveaction_ecr_name,var.environment)
  image_tag_mutability = "MUTABLE"

  image_scanning_configuration {
    scan_on_push = true
  }
}


resource "aws_cloudwatch_log_group" "telleroo_liveaction_ecs_log_group" {
  name = "/aws/ecs/${var.environment}/${var.telleroo_liveaction_ecs_container_name}"
}

resource "aws_ecs_task_definition" "telleroo_liveaction_ecs_task_def" {
  family                   = "telleroo_liveaction-${var.environment}"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  cpu                      = 2048
  memory                   = 4096
  execution_role_arn       = aws_iam_role.telleroo_ecs_execution_role.arn
  task_role_arn            = aws_iam_role.telleroo_ecs_taskrole.arn
  container_definitions = jsonencode([
    {
      name      = var.telleroo_liveaction_ecs_container_name
      image     = format("%s.dkr.ecr.%s.amazonaws.com/%s_%s:latest", data.aws_caller_identity.live_account.account_id, var.aws_region, var.telleroo_liveaction_ecr_name,var.environment)
      essential = true
      portMappings = [{
        containerPort = var.telleroo_liveaction_ecs_container_port
        }, {
        containerPort = var.telleroo_liveaction_ecs_backend_container_port
      }]
      logConfiguration = {
        logDriver = "awslogs"
        options = {
          awslogs-group         = aws_cloudwatch_log_group.telleroo_liveaction_ecs_log_group.name
          awslogs-region        = var.aws_region
          awslogs-stream-prefix = "ecs"
        }
      }
    }
  ])
}

resource "aws_lb_target_group" "telleroo_liveaction_backend_tg" {
  name                 = format("%s-%s-liveaction", var.name,var.environment)
  port                 = var.telleroo_liveaction_ecs_backend_container_port
  protocol             = "HTTP"
  target_type          = "ip"
  vpc_id               = aws_vpc.telleroo_vpc.id
  slow_start           = "30"
  deregistration_delay = "10"
  health_check {
    enabled  = true
    port     = "traffic-port"
    protocol = "HTTP"
    matcher  = "404"
    path     = "/"
  }
}

resource "aws_lb_listener" "telleroo_liveaction_backend_listener_https" {
  load_balancer_arn = aws_lb.telleroo_application_alb.arn
  port              = var.telleroo_liveaction_ecs_backend_container_port
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-2016-08"
  certificate_arn   = var.alb_certificate_arn

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.telleroo_liveaction_backend_tg.arn
  }
}

# resource "aws_lb_listener" "telleroo_liveaction_listener_https" {
#   load_balancer_arn = aws_lb.telleroo_application_alb.arn
#   port              = 443
#   protocol          = "HTTPS"
#   ssl_policy        = "ELBSecurityPolicy-2016-08"
#   certificate_arn   = var.alb_certificate_arn

#   default_action {
#     type             = "forward"
#     target_group_arn = aws_lb_target_group.telleroo_liveaction_backend_tg.arn
#   }
# }

# resource "aws_lb_listener" "telleroo_liveaction_listener_http" {
#   load_balancer_arn = aws_lb.telleroo_application_alb.arn
#   port              = 80
#   protocol          = "HTTP"

#   default_action {
#     type = "redirect"

#     redirect {
#       port        = "443"
#       protocol    = "HTTPS"
#       status_code = "HTTP_301"
#     }
#   }
# }

resource "aws_lb_listener_rule" "telleroo_liveaction_listener_https" {
  # count = var.environment == "production" ? 1 : 0 
  listener_arn = aws_lb_listener.telleroo_application_listener_https.arn
  priority     = 01

  # certificate_arn   = var.alb_certificate_arn

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.telleroo_liveaction_backend_tg.arn
  }

  condition {
    host_header {
      values = [ format("liveaction-%s",var.dns_name)]
    }
  }
}


resource "aws_ecs_service" "telleroo_liveaction_ecs_service" {
  depends_on                        = [aws_ecs_task_definition.telleroo_liveaction_ecs_task_def]
  name                              = format("%s-liveaction-ecs-service", var.name)
  cluster                           = aws_ecs_cluster.telleroo_application_ecs.id
  task_definition                   = aws_ecs_task_definition.telleroo_liveaction_ecs_task_def.arn
  enable_execute_command            = true
  health_check_grace_period_seconds = 30
  capacity_provider_strategy {
    # base              = 0
    capacity_provider = "FARGATE_SPOT"
    weight            = 100
  }
  desired_count = 1
  network_configuration {
    subnets          = [aws_subnet.telleroo_subnet_private_a.id, aws_subnet.telleroo_subnet_private_b.id]
    assign_public_ip = false
    security_groups  = [aws_security_group.allow_alb_to_ecs.id]
  }

  load_balancer {
    target_group_arn = aws_lb_target_group.telleroo_liveaction_backend_tg.arn
    container_name   = var.telleroo_liveaction_ecs_container_name
    container_port   = var.telleroo_liveaction_ecs_backend_container_port
  }

}

# Creating AutoScaling  For ECS

resource "aws_appautoscaling_target" "telleroo_liveaction_ecs_target" {
  max_capacity       = 4
  min_capacity       = 1
  resource_id        = "service/${aws_ecs_cluster.telleroo_application_ecs.name}/${aws_ecs_service.telleroo_liveaction_ecs_service.name}"
  scalable_dimension = "ecs:service:DesiredCount"
  service_namespace  = "ecs"
}

resource "aws_appautoscaling_policy" "telleroo_liveaction_ecs_policy" {
  name               = "scale-up"
  policy_type        = "TargetTrackingScaling"
  resource_id        = aws_appautoscaling_target.telleroo_liveaction_ecs_target.resource_id
  scalable_dimension = aws_appautoscaling_target.telleroo_liveaction_ecs_target.scalable_dimension
  service_namespace  = aws_appautoscaling_target.telleroo_liveaction_ecs_target.service_namespace

  target_tracking_scaling_policy_configuration {

    predefined_metric_specification {
      predefined_metric_type = "ECSServiceAverageCPUUtilization"

    }

    target_value = 80

  }
}
